" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher), cmake
" python dependence:   pep8, pyflake

set nocompatible
filetype off " required! turn off
" set hidden: opening a new file when the current buffer has unsaved changes causes
" files to be hidden instead of closed
set hidden

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    let g:bundle_groups=['python', 'php', 'javascript', 'html', 'tmux', 'json']
endif

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" vim-better-whitespace
" 快速去行尾空格 [<leader> + <Space>]
Plug 'ntpeters/vim-better-whitespace'

" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
Plug 'unblevable/quick-scope'

" easymotion
"更高效的移动 [<Leader><Leader> + f/l or s{char}{char}]
Plug 'Lokaltog/vim-easymotion'

" 快速进行对齐/格式化
Plug 'junegunn/vim-easy-align'

" 主题 solarized
" solarized
Plug 'altercation/vim-colors-solarized'
" molokai
" 主题 molokai
Plug 'tomasr/molokai'

" 增强显示{}
Plug 'eapache/rainbow_parentheses.vim'

" gitgutter
" Plug 'airblade/vim-gitgutter'

"" 自动补全html/xml标签
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml'] }

"" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'

" 使用%在HTML/XML的标签中做匹配跳转
Plug 'vim-scripts/matchit.zip'

" bookmarks workspaces files buffers and tabs
Plug 'vim-ctrlspace/vim-ctrlspace'

" syntastic
Plug 'vim-syntastic/syntastic'

" nav
" nerdtree nerdtreetabs
Plug 'scrooloose/nerdtree'

" quick edit
" 快速注释
Plug 'scrooloose/nerdcommenter'

" view
" airline
" 状态栏增强展示
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" auto complete
" 重启 :YcmRestartServer
Plug 'Valloric/YouCompleteMe'

if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    Plug 'hdima/python-syntax'
    Plug 'hynek/vim-python-pep8-indent'
    Plug 'Glench/Vim-Jinja2-Syntax'
endif

if count(g:bundle_groups, 'php')
    Plug 'spf13/PIV'
endif

if count(g:bundle_groups, 'javascript')
    " javascript
    " 注意: syntax这个插件要放前面
    Plug 'othree/yajs.vim' | Plug 'pangloss/vim-javascript'
endif

if count(g:bundle_groups, 'json')
    " json
    Plug 'elzr/vim-json', {'for': 'json'}
endif

if count(g:bundle_groups, 'html')
    " ###### emmet HTML complete #########
    " Plug "mattn/emmet-vim"
endif

if count(g:bundle_groups, 'tmux')
    " tmux
    " For tmux navigator Ctrl-hjkl
    Plug 'christoomey/vim-tmux-navigator'
endif


" Add plugins to &runtimepath
call plug#end()


" ################### 基础 ######################

" syntastic {{{

    " dependencies
    execute pathogen#infect()

    let g:syntastic_error_symbol='>>'
    let g:syntastic_warning_symbol='>'
    let g:syntastic_check_on_open=1
    let g:syntastic_check_on_wq=0
    let g:syntastic_enable_highlighting=1

    " checkers
    let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
    let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
    let g:syntastic_python_pep8_args='--ignore=E501,E225,E124,E712'
    let g:syntastic_javascript_checkers = ['jsl', 'jshint']
    " let g:syntastic_markdown_checkers = ['proselint']
    let g:syntastic_html_checkers=['tidy', 'jshint']

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    " to see error location list
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_enable_signs = 1
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_auto_jump = 0

    " 修改高亮的背景色, 适应主题
    highlight SyntasticErrorSign guifg=white guibg=black

    " 禁止插件检查java
    let g:syntastic_mode_map = {'mode': 'active', 'passive_filetypes': ['java'] }
" }}}


" ################### 自动补全 ###################

" YouCompleteMe {{{
    "youcompleteme  默认tab  s-tab 和自动补全冲突
    let g:ycm_key_list_select_completion=['<C-j>']
    let g:ycm_key_list_previous_completion=['<C-k>']
    let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
    let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
    let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
    let g:ycm_collect_identifiers_from_tags_files = 1
    " 开启语法关键字补全
    let g:ycm_seed_identifiers_with_syntax=1

    " 跳转到定义处, 分屏打开
    let g:ycm_goto_buffer_command = 'horizontal-split'
    " nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
    nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

    " 引入，可以补全系统，以及python的第三方包
    if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
        let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
    endif

    " 黑名单,不启用
    let g:ycm_filetype_blacklist = {
        \ 'tagbar' : 1,
        \ 'gitcommit' : 1,
        \}
" }}}

" ################### 显示增强 ###################

" airline {{{
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif

    let g:airline_mode_map = {
        \ '__' : '-',
        \ 'n'  : 'N',
        \ 'i'  : 'I',
        \ 'R'  : 'R',
        \ 'c'  : 'C',
        \ 'v'  : 'V',
        \ 'V'  : 'V',
        \ '' : 'V',
        \ 's'  : 'S',
        \ 'S'  : 'S',
        \ '' : 'S',
        \ }

    let g:airline_left_sep = '❯'
    let g:airline_right_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'

    " enable tabline
    let g:airline#extensions#tabline#enabled = 1
" }}}

" ################### 快速导航 ###################

" nerdtree {{{
    map <leader>n :NERDTreeToggle<CR>
    let NERDTreeShowBookmarks=1
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
    let g:NERDTreeWinSize=26

" }}}

" nerdcommenter {{{
    " Add spaces after comment delimiters by default
    let g:NERDSpaceDelims = 1
    " Use compact syntax for prettified multi-line comments
    let g:NERDCompactSexyComs = 1
    " Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDDefaultAlign = 'left'
    " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDCommentEmptyLines = 1
    " Enable trimming of trailing whitespace when uncommenting
    " let g:NERDTrimTrailingWhitespace = 1
" }}}

" Vim Workspace Controller

" easymotion {{{
    let g:EasyMotion_smartcase = 1

    " <Leader>f{char} to move to {char}
    map  <Leader><Leader>f <Plug>(easymotion-bd-f)
    nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)

    " s{char}{char} to move to {char}{char}
    nmap s <Plug>(easymotion-overwin-f2)

    " Move to line
    map <Leader><Leader>l <Plug>(easymotion-bd-jk)
    nmap <Leader><Leader>l <Plug>(easymotion-overwin-line)
" }}}

" quickscope {{{
    let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" }}}

" easyalign {{{
    vmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
    let g:easy_align_ignore_groups = ['Comment', 'String']
    let g:easy_align_delimiters = {
        \ '>': { 'pattern': '>>\|=>\|>' },
        \ '/': {
        \     'pattern':         '//\+\|/\*\|\*/',
        \     'delimiter_align': 'l',
        \     'ignore_groups':   ['!Comment'] },
        \ ']': {
        \     'pattern':       '[[\]]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ ')': {
        \     'pattern':       '[()]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ 'd': {
        \     'pattern':      ' \(\S\+\s*[;=]\)\@=',
        \     'left_margin':  0,
        \     'right_margin': 0
        \   }
        \ }
" }}}

" ################### 功能相关 ###################

" ctrlspace {{{
    if has("gui_running")
    " Settings for MacVim and Inconsolata font
        let g:CtrlSpaceSymbols = { "File": "◯", "CTab": "▣", "Tabs": "▢" }
    endif
    if executable("ag")
        let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
    endif
    let g:CtrlSpaceSearchTiming = 500
    hi link CtrlSpaceNormal   PMenu
    hi link CtrlSpaceSelected PMenuSel
    hi link CtrlSpaceSearch   Search
    hi link CtrlSpaceStatus   StatusLine
    nnoremap <silent><C-p> :CtrlSpace O<CR>
    let g:CtrlSpaceLoadLastWorkspaceOnStart = 1
    let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
    let g:CtrlSpaceSaveWorkspaceOnExit = 1
" }}}

" vim-better-whitespace {{{
    nnoremap <silent> <Leader><Space> :StripWhitespace<CR>
    autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl autocmd BufWritePre <buffer> StripWhitespace
    let g:better_whitespace_filetypes_blacklist=['diff', 'gitcommit', 'unite', 'qf', 'help']
" }}}

" ################### 语言相关 ###################

" pythonsyntax {{{
    let python_highlight_all = 1
" }}}
" piv {{{
    let g:DisableAutoPHPFolding = 1
" }}}

" javascript {{{
    " pangloss/vim-javascript
    let g:html_indent_inctags = "html,body,head,tbody"
    let g:html_indent_script1 = "inc"
    let g:html_indent_style1 = "inc"
" }}}

" json {{{
    let g:vim_json_syntax_conceal = 0
" }}}

" ################### GIT ###################"

" gitgutter {{{
    " 同git diff,实时展示文件中修改的行
    " 只是不喜欢除了行号多一列, 默认关闭,gs时打开
    "let g:gitgutter_map_keys = 0
    "let g:gitgutter_enabled = 0
    "let g:gitgutter_highlight_lines = 1
    "nnoremap <leader>gs :GitGutterToggle<CR>
" }}}

" ################### 显示增强-主题 ###################"

" rainbow_parentheses.vim {{{

    let g:bold_parentheses = 1
    let g:rbpt_max = 15
    let g:rbpt_loadcmd_toggle = 0
    let g:rbpt_colorpairs = [
        \ ['red',         'RoyalBlue3'],
        \ ['brown',       'SeaGreen3'],
        \ ['blue',        'DarkOrchid3'],
        \ ['gray',        'firebrick3'],
        \ ['green',       'RoyalBlue3'],
        \ ['magenta',     'SeaGreen3'],
        \ ['cyan',        'DarkOrchid3'],
        \ ['darkred',     'firebrick3'],
        \ ['brown',       'RoyalBlue3'],
        \ ['darkblue',    'DarkOrchid3'],
        \ ['gray',        'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkmagenta', 'SeaGreen3'],
        \ ['darkcyan',    'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces

" }}}

" solarized {{{
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    " let g:solarized_termcolors=256
" }}}

" molokai {{{
    " monokai原始背景色
    let g:molokai_original = 1
    let g:rehash256 = 1
" }}}

"------------------------------------------- end of configs --------------------------------------------
